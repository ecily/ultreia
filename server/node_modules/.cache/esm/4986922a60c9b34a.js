let mongoose,bcrypt;_60c‍.x([["default",()=>_60c‍.o]]);_60c‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_60c‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);
const { Schema } = 'mongoose'


const userSchema = new Schema({
    name: {
        type: String,
        trim: true,
        required: 'Name is required'
    },
    email: {
        type: String,
        trim: true,
        required: 'Email is required',
        unique: true
    },
    password: {
        type: String,
        required: true,
        min: 6,
        max: 64
    },
    stripe_account_id: '',
    stripe_seller: {},
    stripeSession: {}
}, 
    {timestamps: true}
)

userSchema.pre('save', function(next) {
    let user = this;
    if(user.isModified('password')) {
        return bcrypt.hash(user.password, 12, function (err, hash) {
            if(err) {
                console.log('BCRYPT error')
                return next(err)
            }
            user.password = hash
            return next()
        })
    } else {
        return next()
    }
})

_60c‍.d(mongoose.model('User', userSchema));